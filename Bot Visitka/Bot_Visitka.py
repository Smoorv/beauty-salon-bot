import telebot
from telebot import types
import sqlite3
import logging

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

#–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–∞–π–ª–µ .env
token = os.getenv('YOUR_TOKEN_HERE')
bot = telebot.TeleBot("YOUR_TOKEN_HERE")

#–î–ª—è –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ë–î
conn = sqlite3.connect(':memory:', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS requests
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   name TEXT,
                   phone TEXT)''')

#–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("–ü—Ä–∞–π—Å"),
        types.KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
        types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    ]
    markup.add(*buttons)
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, 
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ-–±–æ—Ç —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã!",
                    reply_markup=get_keyboard())

#–ü—Ä–∞–π—Å –ª–∏—Å—Ç
@bot.message_handler(func=lambda msg: msg.text == "–ü—Ä–∞–π—Å")
def show_price(message):

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–í–æ–ª–æ—Å—ã", callback_data="hair"),
        types.InlineKeyboardButton("–ù–æ–≥—Ç–∏", callback_data="nails")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

#–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@bot.message_handler(func=lambda msg: msg.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
def request(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(msg, process_name)
    
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_name(message):
    name = message.text
    if len(name) < 2:
        bot.send_message(message.chat.id, "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (—Ñ–æ—Ä–º–∞—Ç: +79991234567):")
    bot.register_next_step_handler(msg, process_phone, name)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
def process_phone(message, name):
    phone = message.text
    if not phone.startswith("+7") or len(phone) != 12:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    try:
        cursor.execute("INSERT INTO requests (name, phone) VALUES (?, ?)", (name, phone))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ)
        cursor.execute("SELECT * FROM requests")
        last_request = cursor.fetchone()
        bot.send_message(message.chat.id, 
                        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ –ë–î:\n–ò–º—è: {last_request[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {last_request[2]}")
    except Exception as e:
        logger.error(f"Database error: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    if call.data == "hair":
        bot.send_message(call.message.chat.id, "üíá –£—Å–ª—É–≥–∏ –¥–ª—è –≤–æ–ª–æ—Å:\n- –°—Ç—Ä–∏–∂–∫–∞: 1500—Ä\n- –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ: 2500—Ä")
    elif call.data == "nails":
        bot.send_message(call.message.chat.id, "üíÖ –ú–∞–Ω–∏–∫—é—Ä:\n- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π: 1000—Ä\n- –î–∏–∑–∞–π–Ω: +300—Ä")

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ)")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()
